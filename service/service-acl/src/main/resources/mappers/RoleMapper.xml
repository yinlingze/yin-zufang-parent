<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper是根标签。namespace属性是找到当前配置的依据 -->
<!-- 由于最理想的Mybatis使用方式是：通过Mapper接口调用接口方法，访问数据库 -->
<!-- 这样的理想方式要求：能够通过接口全类名找到Mapper配置 -->
<!-- 所以：我们就用Mapper接口的全类名来给namespace属性赋值 -->
<mapper namespace="org.example.dao.RoleMapper">

    <sql id="columns">
        select id,role_name,role_code,description,create_time,update_time,is_deleted
    </sql>
    <!-- List<Emp> selectAll(); -->
    <select id="findAll" resultType="org.example.entity.Role">
        <include refid="columns"></include>
        from acl_role
        where is_deleted=0


    </select>

    <select id="findById" resultType="role">
        <include refid="columns"></include>
        from acl_role
            where id=#{id}
    </select>
    <insert id="save" >
        insert into acl_role(role_name,role_code,description)
        value(#{roleName},#{roleCode},#{description})

    </insert>

    <update id="update" >
        update acl_role set
        <if test="roleName != null and roleName != ''">
            role_name = #{roleName} ,
        </if>
        <if test="roleCode != null and roleCode != ''">
            role_code = #{roleCode} ,
        </if>
        <if test="description != null and description != ''">
            description = #{description} ,
        </if>
        update_time =  now()
        where
        id = #{id}
    </update>

    <delete id="delectById">
        delete from acl_role where id=#{id}
    </delete>


    <sql id="findPageWhere">
        <where>
            <if test="roleName != null and roleName != ''">
                and role_name = #{roleName}
            </if>
            and is_deleted = 0
        </where>
    </sql>

    <select id="findPage" resultType="Role">
        <include refid="columns" />
        from acl_role
        <include refid="findPageWhere"/>
        order by id desc
    </select>
</mapper>